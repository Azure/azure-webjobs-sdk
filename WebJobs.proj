<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="UnitTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <BuildInParallel Condition=" '$(BuildInParallel)'  == ''">true</BuildInParallel>
    <NuGetExe>tools\NuGet.exe</NuGetExe>
    <SkipStrongNamesExe>packages\Microsoft.Web.SkipStrongNames.1.0.0\tools\SkipStrongNames.exe</SkipStrongNamesExe>
    <SkipStrongNamesXml>tools\SkipStrongNames.xml</SkipStrongNamesXml>
    <PublishPath Condition=" '$(PublishPath)' == '' ">bin</PublishPath>
    <SetConfiguration Condition=" '$(Configuration)' != '' ">Configuration=$(Configuration)</SetConfiguration>
    <SetPlatform Condition=" '$(Platform)' != '' ">Platform=$(Platform)</SetPlatform>
  </PropertyGroup>

  <ItemGroup>
    <!-- The Assembly items below MUST be kept in dependency order. -->
    <Build Include="src\Microsoft.Azure.WebJobs\WebJobs.csproj">
      <PublishType>Assembly</PublishType>
      <PublishPath>$(PublishPath)\Binaries</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.Storage\WebJobs.Storage.csproj">
      <PublishType>Assembly</PublishType>
      <PublishPath>$(PublishPath)\Binaries</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.Protocols\WebJobs.Protocols.csproj">
      <PublishType>Assembly</PublishType>
      <PublishPath>$(PublishPath)\Binaries</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.Host\WebJobs.Host.csproj">
      <PublishType>Assembly</PublishType>
      <PublishPath>$(PublishPath)\Binaries</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.ServiceBus\WebJobs.ServiceBus.csproj">
      <PublishType>Assembly</PublishType>
      <PublishPath>$(PublishPath)\Binaries</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.Logging\WebJobs.Logging.csproj">
      <PublishType>Assembly</PublishType>
      <PublishPath>$(PublishPath)\Binaries</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.Logging.ApplicationInsights\WebJobs.Logging.ApplicationInsights.csproj">
      <PublishType>Assembly</PublishType>
      <PublishPath>$(PublishPath)\Binaries</PublishPath>
    </Build>
    <Build Include="src\Dashboard\Dashboard.csproj">
      <PublishType>Assembly</PublishType>
      <PublishPath>$(PublishPath)\Binaries</PublishPath>
    </Build>

    <Build Include="src\AzureJobs\AzureJobs.proj">
      <PublishType>File</PublishType>
      <PublishPath>$(PublishPath)\SiteExtensions</PublishPath>
    </Build>
    <Build Include="src\AzureJobs.Directory\AzureJobs.Directory.proj">
      <PublishType>Directory</PublishType>
      <PublishPath>$(PublishPath)\SiteExtensionsUnzipped\AzureJobs</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.Core.NuGet\WebJobs.Core.nuproj">
      <PublishType>File</PublishType>
      <PublishPath>$(PublishPath)\Packages</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.NuGet\WebJobs.nuproj">
      <PublishType>File</PublishType>
      <PublishPath>$(PublishPath)\Packages</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.ServiceBus.NuGet\WebJobs.ServiceBus.nuproj">
      <PublishType>File</PublishType>
      <PublishPath>$(PublishPath)\Packages</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.Logging.NuGet\WebJobs.Logging.nuproj">
      <PublishType>File</PublishType>
      <PublishPath>$(PublishPath)\Packages</PublishPath>
    </Build>
    <Build Include="src\Microsoft.Azure.WebJobs.Logging.ApplicationInsights.NuGet\WebJobs.Logging.ApplicationInsights.nuproj">
      <PublishType>File</PublishType>
      <PublishPath>$(PublishPath)\Packages</PublishPath>
    </Build>
  </ItemGroup>

  <UsingTask TaskName="SkipStrongNames.CheckSkipStrongNamesStatus" AssemblyFile="$(SkipStrongNamesExe)" />

  <Target Name="DownloadNuGet">
    <DownloadNuGet OutputFileName="$(NuGetExe)" MinimumVersion="2.12.0" />
  </Target>

  <Target Name="RestoreSkipStrongNames" DependsOnTargets="DownloadNuGet">
    <Exec Command='"$(NuGetExe)" restore .nuget\packages.config -PackagesDirectory packages -NonInteractive -Verbosity quiet -ConfigFile .nuget\NuGet.Config' />
  </Target>

  <Target Name="CheckSkipStrongNames" DependsOnTargets="RestoreSkipStrongNames">
    <CheckSkipStrongNamesStatus AssembliesFile="$(SkipStrongNamesXml)">
      <Output TaskParameter="Status" PropertyName="Status" />
    </CheckSkipStrongNamesStatus>
    <Error Text="Unit tests will not run correctly unless SkipStrongNames is Enabled. Current status: $(Status). Run the EnableSkipStrongNames target to fix this problem." Condition="'$(Status)' != 'Enabled'" />
  </Target>

  <Target Name="EnableSkipStrongNames" DependsOnTargets="RestoreSkipStrongNames">
    <Exec Command='"$(SkipStrongNamesExe)" -e "$(SkipStrongNamesXml)"' />
    <CheckSkipStrongNamesStatus AssembliesFile="$(SkipStrongNamesXml)">
      <Output TaskParameter="Status" PropertyName="Status" />
    </CheckSkipStrongNamesStatus>
    <Message Text="SkipStrongNames: $(Status)" Importance="High" />
  </Target>

  <Target Name="DisableSkipStrongNames" DependsOnTargets="RestoreSkipStrongNames">
    <Exec Command='"$(SkipStrongNamesExe)" -d "$(SkipStrongNamesXml)"' />
    <CheckSkipStrongNamesStatus AssembliesFile="$(SkipStrongNamesXml)">
      <Output TaskParameter="Status" PropertyName="Status" />
    </CheckSkipStrongNamesStatus>
    <Message Text="SkipStrongNames: $(Status)" Importance="High" />
  </Target>

  <Target Name="RestorePackages" DependsOnTargets="DownloadNuGet">
    <Message Text="Restoring NuGet packages..." Importance="High" />
    <Exec Command='"$(NuGetExe)" restore WebJobs.sln -PackagesDirectory packages -NonInteractive -Verbosity quiet -ConfigFile .nuget\NuGet.Config' />
  </Target>

  <Target Name="GetBinplace">
    <PropertyGroup>
      <NestedBuildProperties Condition=" '$(SetConfiguration)' != '' or '$(SetPlatform)' != ''">$(SetConfiguration); $(SetPlatform)</NestedBuildProperties>
    </PropertyGroup>

    <ItemGroup>
      <Binplace Include="tools\Binplace\%(Build.PublishType).proj">
        <Properties>ProjectFile=%(FullPath); BinplaceOutputPath=$([System.IO.Path]::GetFullPath('%(PublishPath)')); Properties=$(NestedBuildProperties)</Properties>
      </Binplace>
    </ItemGroup>
  </Target>

  <Target Name="Build" DependsOnTargets="RestorePackages;GetBinplace">
    <MSBuild Projects="@(Binplace)"
             BuildInParallel="$(BuildInParallel)"/>
  </Target>

  <Target Name="FilterAssemblies">
    <ItemGroup>
      <Assemblies Include="%(Build.RootDir)%(Build.Directory)bin\$(Configuration)\Microsoft.Azure.%(Build.Filename).dll" Condition="%(Build.PublishType)=='Assembly' AND %(Build.Filename) != 'Dashboard'">
        <Dest>bin\sign\Microsoft.Azure.%(Build.Filename).dll</Dest>
      </Assemblies>
    </ItemGroup>
  </Target>

  <Target Name="GetBitsToSign" DependsOnTargets="FilterAssemblies;Build">
    <RemoveDir Directories="bin\sign" />
    <Delete Files="bin\tosign.zip" />
    <Copy 
      SourceFiles="@(Assemblies)"
      DestinationFiles="%(Assemblies.Dest)"/>
    <Exec Command="PowerShell -command Compress-Archive bin\sign\* bin\tosign.zip" />
    <Exec Command="PowerShell tools\RunSigningJob.ps1" />
  </Target>

  <Target Name="ReplaceDlls" DependsOnTargets="FilterAssemblies">
    <Copy
      SourceFiles="%(Assemblies.Dest)"
      DestinationFiles="%(Assemblies.Identity)"/>
  </Target>

  <UsingTask TaskName="Xunit.Runner.MSBuild.xunit" AssemblyFile="packages\xunit.MSBuild.2.0.0.0\tools\xunit.runner.msbuild.dll"/>

  <Target Name="UnitTest" DependsOnTargets="CheckSkipStrongNames;Build">
    <ItemGroup>
        <UnitTestProjects Include="test\Microsoft.Azure.WebJobs.Host.UnitTests\WebJobs.Host.UnitTests.csproj"/>
        <UnitTestProjects Include="test\Microsoft.Azure.WebJobs.Host.FunctionalTests\WebJobs.Host.FunctionalTests.csproj"/>
        <UnitTestProjects Include="test\Microsoft.Azure.WebJobs.ServiceBus.UnitTests\WebJobs.ServiceBus.UnitTests.csproj"/>
        <UnitTestProjects Include="test\Dashboard.UnitTests\Dashboard.UnitTests.csproj"/>
    </ItemGroup>

    <MSBuild Projects="@(UnitTestProjects)"
             Properties="$(SetConfiguration); $(SetPlatform)"
             BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="UnitTestAssemblies"/>
    </MSBuild>

    <xunit Assemblies="@(UnitTestAssemblies)"/>
  </Target>

  <Target Name="BuildTestBinaries" DependsOnTargets="EnableSkipStrongNames;RestorePackages">
    <ItemGroup>
        <TestBinaries Include="test\Microsoft.Azure.WebJobs.Host.UnitTests\WebJobs.Host.UnitTests.csproj"/>
        <TestBinaries Include="test\Microsoft.Azure.WebJobs.Host.FunctionalTests\WebJobs.Host.FunctionalTests.csproj"/>
        <TestBinaries Include="test\Microsoft.Azure.WebJobs.ServiceBus.UnitTests\WebJobs.ServiceBus.UnitTests.csproj"/>
        <TestBinaries Include="test\Dashboard.UnitTests\Dashboard.UnitTests.csproj"/>
        <TestBinaries Include="test\Microsoft.Azure.WebJobs.Host.EndToEndTests\WebJobs.Host.EndToEndTests.csproj"/>
    </ItemGroup>

    <MSBuild Projects="@(TestBinaries)"
             Properties="$(SetConfiguration); $(SetPlatform)"
             BuildInParallel="$(BuildInParallel)">
    </MSBuild>
  </Target>

  <Target Name="FunctionalTest" DependsOnTargets="UnitTest">
    <ItemGroup>
      <FunctionalTestProjects Include="test\Microsoft.Azure.WebJobs.Host.EndToEndTests\WebJobs.Host.EndToEndTests.csproj"/>
    </ItemGroup>

    <MSBuild Projects="@(FunctionalTestProjects)"
             Properties="$(SetConfiguration); $(SetPlatform)"
             BuildInParallel="$(BuildInParallel)">
      <Output TaskParameter="TargetOutputs" ItemName="FunctionalTestAssemblies"/>
    </MSBuild>

    <xunit Assemblies="@(FunctionalTestAssemblies)"/>
  </Target>

  <Target Name="Clean" DependsOnTargets="GetBinplace">
    <MSBuild Projects="@(Binplace)"
             Targets="Clean"
             BuildInParallel="$(BuildInParallel)"/>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build"/>

  <Target Name="GetOfficialProjects" Returns="@(OfficialProjects)">
    <ItemGroup>
      <OfficialProjects Include="%(Build.FullPath)">
        <PublishType>%(Build.PublishType)</PublishType>
        <PublishPath>$([System.IO.Path]::GetFullPath('%(Build.PublishPath)'))</PublishPath>
      </OfficialProjects>
    </ItemGroup>
  </Target>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <OutputFileName ParameterType="System.String" Required="true" />
      <MinimumVersion ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.Net" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                Version minimumRequiredVersion;
                
                if (!Version.TryParse(MinimumVersion, out minimumRequiredVersion))
                {
                    Log.LogError("MinimumVersion '{0}' is not a valid Version.", MinimumVersion);
                }
        
                try
                {
                    OutputFileName = Path.GetFullPath(OutputFileName);
                    
                    if (File.Exists(OutputFileName))
                    {
                        // If NuGet.exe exists but is less than the minimum required version, delete it so that the
                        // latest version will be downloaded.
                        FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(OutputFileName);
                        
                        string toParse;
                        
                        if (versionInfo != null && versionInfo.ProductVersion != null)
                        {
                            toParse = versionInfo.ProductVersion;
                        }
                        else
                        {
                            toParse = null;
                        }
                        
                        Version current;
                        Version parsed;
                        
                        if (toParse != null && Version.TryParse(toParse, out parsed))
                        {
                            current = parsed;
                        }
                        else
                        {
                            // Treat a missing or invalid version like V0.0 (which will trigger a delete and download).
                            current = new Version(0, 0);
                        }
                        
                        if (current < minimumRequiredVersion)
                        {
                            File.Delete(OutputFileName);
                        }
                    }
                    
                    if (!File.Exists(OutputFileName))
                    {
                        Log.LogMessage("Downloading latest version of NuGet.exe...");
                        WebClient webClient = new WebClient();
                        webClient.DownloadFile("https://dist.nuget.org/win-x86-commandline/latest/nuget.exe", OutputFileName);
                    }

                    return true;
                }
                catch (Exception ex)
                {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>